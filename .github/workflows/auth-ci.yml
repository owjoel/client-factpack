name: CI - Auth
on:
  push:
    branches:
      - main
    paths:
      - 'apps/auth/**'

  pull_request:
    branches:
      - main
    paths:
      - 'apps/auth/**'
permissions:
  contents: read
  packages: write

jobs:
  # Code Analysis Job
  lint:
    name: Code Analysis (Linting)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: |
          cd apps/auth
          golangci-lint run --timeout=2m

  # Test Job (Dummy Test)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint  # Runs only after linting succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Dummy Test (Echo)
        run: echo "Running dummy tests..."

  # Build Job (Push Docker Image to GitHub Container Registry)
  deploy:
    needs: [lint, test]
    runs-on: ubuntu-latest
    env:
      SERVICE_DIR: apps/auth

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with: 
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubCI
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin public.ecr.aws

      - name: Get Latest Service Tag
        id: service-tag
        run: |
          git fetch --tags
          SEARCH="auth-v[0-9]*.[0-9]*.[0-9]*"
          LATEST_TAG=$(git tag --list "auth-v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
          echo $LATEST_TAG
          SEMVER=$(echo "$LATEST_TAG" | sed "s/auth-//")
          COMMIT_SHA=$(git rev-parse --short HEAD)
          VERSION="${SEMVER}-${COMMIT_SHA}"
          echo "Combined version with SHA: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build, Tag, Push to ECR Public
        id: build-publish
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.service-tag.outputs.version }}
          ECR_PUBLIC_REPO: public.ecr.aws/c1r0g2t1/cs480/auth
        run: |
          echo "Tag: $IMAGE_TAG"
          docker build -t "$ECR_PUBLIC_REPO:$IMAGE_TAG" .
          docker tag "$ECR_PUBLIC_REPO:$IMAGE_TAG" "$ECR_PUBLIC_REPO:latest"
          docker push "$ECR_PUBLIC_REPO:$IMAGE_TAG"
          docker push "$ECR_PUBLIC_REPO:latest"
          echo "image=$ECR_PUBLIC_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_PUBLIC_REPO"
        working-directory: ${{ env.SERVICE_DIR }}

      - name: Create Task Definition Revision
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: apps/auth/task-definition.json
          container-name: auth-ecs-container
          image: ${{ steps.build-publish.outputs.image }}
      
      - name: Amazon ECS Deployment
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: auth
          cluster: ${{ secrets.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true
