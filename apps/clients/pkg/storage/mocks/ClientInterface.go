// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	model "github.com/owjoel/client-factpack/apps/clients/pkg/api/model"
	mock "github.com/stretchr/testify/mock"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: c
func (_m *ClientInterface) Create(c *model.Client) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Client) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: clientID
func (_m *ClientInterface) Get(clientID uint) (*model.Client, error) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*model.Client, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Client); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c
func (_m *ClientInterface) Update(c *model.Client) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Client) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
