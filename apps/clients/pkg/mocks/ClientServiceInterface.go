// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/owjoel/client-factpack/apps/clients/pkg/api/model"
	mock "github.com/stretchr/testify/mock"
)

// ClientServiceInterface is an autogenerated mock type for the ClientServiceInterface type
type ClientServiceInterface struct {
	mock.Mock
}

// CreateClientByName provides a mock function with given fields: ctx, req
func (_m *ClientServiceInterface) CreateClientByName(ctx context.Context, req *model.CreateClientByNameReq) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientByName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateClientByNameReq) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateClientByNameReq) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateClientByNameReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllClients provides a mock function with given fields: ctx, query
func (_m *ClientServiceInterface) GetAllClients(ctx context.Context, query *model.GetClientsQuery) (int, []model.Client, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetAllClients")
	}

	var r0 int
	var r1 []model.Client
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetClientsQuery) (int, []model.Client, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetClientsQuery) int); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetClientsQuery) []model.Client); ok {
		r1 = rf(ctx, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.Client)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.GetClientsQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClient provides a mock function with given fields: ctx, clientID
func (_m *ClientServiceInterface) GetClient(ctx context.Context, clientID string) (*model.Client, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *model.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Client, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Client); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchClient provides a mock function with given fields: ctx, req, clientID
func (_m *ClientServiceInterface) MatchClient(ctx context.Context, req *model.MatchClientReq, clientID string) (string, error) {
	ret := _m.Called(ctx, req, clientID)

	if len(ret) == 0 {
		panic("no return value specified for MatchClient")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.MatchClientReq, string) (string, error)); ok {
		return rf(ctx, req, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.MatchClientReq, string) string); ok {
		r0 = rf(ctx, req, clientID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.MatchClientReq, string) error); ok {
		r1 = rf(ctx, req, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RescrapeClient provides a mock function with given fields: ctx, clientID
func (_m *ClientServiceInterface) RescrapeClient(ctx context.Context, clientID string) error {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for RescrapeClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClient provides a mock function with given fields: ctx, clientID, changes
func (_m *ClientServiceInterface) UpdateClient(ctx context.Context, clientID string, changes []model.SimpleChanges) error {
	ret := _m.Called(ctx, clientID, changes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []model.SimpleChanges) error); ok {
		r0 = rf(ctx, clientID, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientServiceInterface creates a new instance of ClientServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientServiceInterface {
	mock := &ClientServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
