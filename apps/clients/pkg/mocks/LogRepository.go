// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/owjoel/client-factpack/apps/clients/pkg/api/model"
	mock "github.com/stretchr/testify/mock"
)

// LogRepository is an autogenerated mock type for the LogRepository type
type LogRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx
func (_m *LogRepository) Count(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, log
func (_m *LogRepository) Create(ctx context.Context, log *model.Log) (string, error) {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Log) (string, error)); ok {
		return rf(ctx, log)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Log) string); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Log) error); ok {
		r1 = rf(ctx, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, query
func (_m *LogRepository) GetAll(ctx context.Context, query *model.GetLogsQuery) ([]model.Log, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetLogsQuery) ([]model.Log, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetLogsQuery) []model.Log); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetLogsQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: ctx, logID
func (_m *LogRepository) GetOne(ctx context.Context, logID string) (*model.Log, error) {
	ret := _m.Called(ctx, logID)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 *model.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Log, error)); ok {
		return rf(ctx, logID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Log); ok {
		r0 = rf(ctx, logID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, logID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLogRepository creates a new instance of LogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogRepository {
	mock := &LogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
