// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/owjoel/client-factpack/apps/clients/pkg/api/model"
	mock "github.com/stretchr/testify/mock"
)

// LogServiceInterface is an autogenerated mock type for the LogServiceInterface type
type LogServiceInterface struct {
	mock.Mock
}

// CreateLog provides a mock function with given fields: ctx, log
func (_m *LogServiceInterface) CreateLog(ctx context.Context, log *model.Log) (string, error) {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for CreateLog")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Log) (string, error)); ok {
		return rf(ctx, log)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Log) string); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Log) error); ok {
		r1 = rf(ctx, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLog provides a mock function with given fields: ctx, logID
func (_m *LogServiceInterface) GetLog(ctx context.Context, logID string) (*model.Log, error) {
	ret := _m.Called(ctx, logID)

	if len(ret) == 0 {
		panic("no return value specified for GetLog")
	}

	var r0 *model.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Log, error)); ok {
		return rf(ctx, logID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Log); ok {
		r0 = rf(ctx, logID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, logID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: ctx, query
func (_m *LogServiceInterface) GetLogs(ctx context.Context, query *model.GetLogsQuery) (int, []model.Log, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 int
	var r1 []model.Log
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetLogsQuery) (int, []model.Log, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetLogsQuery) int); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetLogsQuery) []model.Log); ok {
		r1 = rf(ctx, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.Log)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.GetLogsQuery) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewLogServiceInterface creates a new instance of LogServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogServiceInterface {
	mock := &LogServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
