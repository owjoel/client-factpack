basePath: /api/v1
definitions:
  models.AuthChallengeRes:
    properties:
      challenge:
        enum:
        - NEW_PASSWORD_REQUIRED
        - MFA_SETUP
        - SOFTWARE_TOKEN_MFA
        example: SOFTWARE_TOKEN_MFA
        type: string
    type: object
  models.SetupMFARes:
    properties:
      token:
        type: string
    type: object
  models.StatusRes:
    properties:
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Authentication service for managing auth flows
  title: client-factpack/auth
  version: "1.0"
paths:
  /auth/changePassword:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Users are required to change password on first time login, using their username and password sent via email.
        Submit The user's username and new password to respond to this auth challenge.
        Request must contain "session" cookie containing the session token to respond to the challenge
        On success, responds with next auth challenge, which should be to set up MFA
      parameters:
      - example: ABCDEF
        in: formData
        name: newPassword
        type: string
      - in: formData
        name: session
        type: string
      - example: joel.ow.2022
        in: formData
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthChallengeRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: Change Password for first-time Login
      tags:
      - auth
  /auth/confirmForgetPassword:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Submit Cognito OTP sent to user's email to proceed with password
        reset
      parameters:
      - example: ABCDEF
        in: formData
        name: code
        type: string
      - example: "67890"
        in: formData
        name: newPassword
        type: string
      - example: joel.ow.2022
        in: formData
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.StatusRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: Confirm Forget Password
      tags:
      - auth
  /auth/createUser:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Admin registers user with Cognito user pool via email. Cognito
        sends an email with a temporary password to the user.
      parameters:
      - description: User's email address
        in: formData
        name: email
        required: true
        type: string
      - description: User's password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: Create Users
      tags:
      - auth
  /auth/forgetPassword:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Forget password
      parameters:
      - example: joel.ow.2022
        in: formData
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.StatusRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: Forget Password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Cognito SSO login using username and password, returns the next
        auth challenge, either
      parameters:
      - example: "12345"
        in: formData
        name: password
        type: string
      - example: joel.ow.2022
        in: formData
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthChallengeRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusRes'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.StatusRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: Login
      tags:
      - auth
  /auth/loginMFA:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Responds to Congito auth challenge after successful credential sign in
        Request must contain "session" cookie containing the session token to respond to the challenge
      parameters:
      - in: formData
        name: code
        type: string
      - in: formData
        name: session
        type: string
      - in: formData
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: Submit user TOTP code from authenticator app for all subsequent log
        ins.
      tags:
      - auth
  /auth/setupMFA:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Submit GET query to cognito to obtain an OTP token.
        The user can use this token to set up their authenticator app, either through QR code or by manual keying in of the token.
        Request must contain "session" cookie containing the session token to respond to the challenge
        On success, the token is returned, and the cookie is updated for the next auth step
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SetupMFARes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: Get OTP Token for setting up TOTP authenticator
      tags:
      - auth
  /auth/verifyMFA:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        User submits the code from their authenticator app to verify the TOTP setup
        Request must contain "session" cookie containing the session token to respond to the challenge
        On success, the user can proceed to sign in again
      parameters:
      - in: formData
        name: code
        type: string
      - in: formData
        name: session
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.StatusRes'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.StatusRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: Verify initial code from authenticator app
      tags:
      - auth
  /health:
    get:
      description: Basic health check
      produces:
      - application/json
      responses:
        "200":
          description: Connection status
          schema:
            $ref: '#/definitions/models.StatusRes'
      summary: ping
      tags:
      - health
swagger: "2.0"
